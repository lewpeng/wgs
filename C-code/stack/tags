!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
FALSE	link_stack.c	9;"	d	file:
STACK_NODE	link_stack.c	/^typedef struct STACK_NODE  $/;"	s	file:
STACK_SIZE	static_stack.c	10;"	d	file:
STACK_TYPE	stack.h	6;"	d
StackNode	link_stack.c	/^} StackNode;  $/;"	t	typeref:struct:STACK_NODE	file:
create_stack	dyn_static.c	/^void create_stack(size_t size)  $/;"	f
create_stack	link_stack.c	/^void create_stack(size_t size)  $/;"	f
destroy_stack	dyn_static.c	/^void destroy_stack(void)  $/;"	f
destroy_stack	link_stack.c	/^void destroy_stack(void)  $/;"	f
is_empty	dyn_static.c	/^int is_empty(void)  $/;"	f
is_empty	link_stack.c	/^int is_empty(void)  $/;"	f
is_empty	static_stack.c	/^int is_empty(void)  $/;"	f
is_full	dyn_static.c	/^int is_full(void)  $/;"	f
is_full	link_stack.c	/^int is_full(void)  $/;"	f
is_full	static_stack.c	/^int is_full(void)  $/;"	f
main	dyn_static.c	/^int main(void)  $/;"	f
main	link_stack.c	/^int main(void)  $/;"	f
main	static_stack.c	/^int main(void)  $/;"	f
next	link_stack.c	/^    struct STACK_NODE *next;  $/;"	m	struct:STACK_NODE	typeref:struct:STACK_NODE::STACK_NODE	file:
pop	dyn_static.c	/^void pop(void)  $/;"	f
pop	link_stack.c	/^void pop(void)  $/;"	f
pop	static_stack.c	/^void pop(void)  $/;"	f
print	dyn_static.c	/^void print(void)  $/;"	f
print	link_stack.c	/^void print(void)  $/;"	f
print	static_stack.c	/^void print(void)  $/;"	f
push	dyn_static.c	/^void push(STACK_TYPE value)  $/;"	f
push	link_stack.c	/^void push(STACK_TYPE value)  $/;"	f
push	static_stack.c	/^void push(STACK_TYPE value)  $/;"	f
stack	dyn_static.c	/^static STACK_TYPE *stack;  $/;"	v	file:
stack	link_stack.c	/^static StackNode *stack;  $/;"	v	file:
stack	static_stack.c	/^static STACK_TYPE stack[STACK_SIZE];  $/;"	v	file:
stack_size	dyn_static.c	/^static int        stack_size;  $/;"	v	file:
top	dyn_static.c	/^STACK_TYPE top(void)  $/;"	f
top	link_stack.c	/^STACK_TYPE top(void)  $/;"	f
top	static_stack.c	/^STACK_TYPE top(void)  $/;"	f
top_element	dyn_static.c	/^static int        top_element = -1;  $/;"	v	file:
top_element	static_stack.c	/^static int top_element = -1;  $/;"	v	file:
value	link_stack.c	/^    STACK_TYPE value;  $/;"	m	struct:STACK_NODE	file:
